Running tests (sets of assert statements):

Java: Tests can be run in the usual way by compiling everything (e.g. javac A3Test.java) then using JUnit (e.g. java org.junit.runner.JUnitCore A3Test).

JavaScript: Use rhino to run the test file (e.g. rhino A3Test.js).

Scheme: Use the Gambit Scheme Interpreter to run the test file (e.g. gsi A1Test.scm).

Haskell: Use the GHCi (Glasgow Haskell Compiler interpreter) and then the command "runTestTT tests"), (e.g. ghci A3Test.hs, then in the interpreter runTestTT tests).

To install the Gambit Scheme Interpreter (gsi):

Download the latest release from http://gambitscheme.org/wiki/index.php/Main_Page and follow the install instructiosn from the README and INSTALL.txt. 
Only the interpreter gsi is needed; the compiler (gsc) can be installed as well if desired.

To install Boost (on Unix): 
Option 1: Use your package manager (version of Boost may be slightly old).

Option 2: get boost_1_56_0.tar.bz2 from www.boost.org/users/history/version_1_56_0.html.

Then go to the directory where you want the Boost installation and execute tar --bzip2 -xf /path/to/boost_1_56_0.tar.bz2 (for example, /usr/local/boost_1_56_0.tar.bz2).

From the boost_1_56_0 directory, type ./bootstrap.sh --with-libraries=filesystem --with-libraries=system, then type ./b2 install. Alternatively, as I did, simply type ./bootstrap.sh then ./b2 install to do a full install. Reference: www.boost.org/docs/libs/1_56_0/more/getting_started/unix-variants.html.

Next you will have to add the directory $BOOST_HOME/boost_1_56_0/stage/lib/ to your LD_LIBRARY_PATH environment variable, where $BOOST_HOME is wherever Boost was installed (/usr/local/ for example).

Potentially you may have to add $BOOST_HOME or $BOOST_HOME/boost_1_56_0 to your $PATH variable; it appears that I didn't have to. Note that to link the boost::filesystem and boost::system libraries, -lboost_filesystem and -lboost_system have to be added to the compile command (e.g. g++ -std=c++11 test.cpp -o test -lboost_filesystem -lboost_system).

This is a first incarnation of an AST that is ultimately supposed to represent a single function with return type int within a class. 

The function will be an if-else construct in the cases of A1.java and A2.java, and a for loop representing a recurrence relation in the case of A3.java

Many of the comments are as much for my own clarification as for other potential readers of my program.

Printing into different languages (Java, JavaScript, Haskell and Scheme) also generates new randomized sets of data, with the same syntax tree except for different initialization values in the case of A3, and different comparison and return values in the cases of A1 and A2. 

The generator could easily be modified to print the same data set into all four programming languages by separating the tree-creation from the printA3(), printA1A2() etc. functions.

Right now the assignment generator assumes that the student numbers are stored in a file called "STUDENT_NUMBERS".

Note that the ResultFinder doesn't include a totally well thought-out grammar for expression evaluation and so doesn't take into account precedence (e.g. between * and +). However, it works for the two programs printed for this assignment.

Also, the abstract syntax trees created here aren't quite correct. In particular, in a sequence of statements each successive statement should be the child of the previous statement. Instead, sequence of statements were stored in a vector member of a Block class. This led to the need to have a MissingBracket Printer that comes along and fixes the brackets for the Scheme programs.

Pretty-printing into Haskell wasn't very general since I couldn't figure out how to elegantly convert the for-loop in A3 into a state-less function.
